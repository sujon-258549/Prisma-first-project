generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  password       String
  role           Role
  isDelete       Boolean         @default(false)
  diplomaTeacher DiplomaTeacher?

  @@map("users")
}

model DiplomaTeacher {
  id               String      @id @default(uuid())
  name             String
  email            String      @unique
  fatherName       String
  motherName       String
  gender           Gender
  dateOfBirth      DateTime
  bloodGroup       BloodGroup?
  phoneNumber      String      @unique
  emergencyContact String?
  presentAddress   String
  permanentAddress String

  teacherId   String           @unique
  status      EmploymentStatus @default(ACTIVE)
  joiningDate DateTime
  designation Designation
  department  String

  trainingCompleted  Boolean       @default(false)
  teachingSubject    String?
  nidNumber          String?
  birthCertificateNo String?
  nationality        String
  religion           String
  maritalStatus      MaritalStatus
  group              Group? // A, B, or C

  photoUrl       String? // URI to photo
  signatureUrl   String? // URI to signature
  isDeleted      Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  classTest      ClassTest[]
  user           User             @relation(fields: [email], references: [email])
  AttendanceData AttendanceData[]

  @@map("teacher")
}

model DiplomaStudent {
  id                     String                  @id @default(uuid())
  name                   String
  fatherName             String
  motherName             String
  dateOfBirth            DateTime
  gender                 String
  bloodGroup             BloodGroup
  phoneNumber            String                  @unique
  email                  String                  @unique
  presentAddress         String
  permanentAddress       String
  department             String
  semester               Int
  registrationNo         String                  @unique
  rollNo                 String                  @unique
  gpa                    Float?                  @default(0.00)
  passingYear            Int?
  // âœ… Class 10 (SSC) Info
  classTenSchoolName     String
  classTenBoard          String
  classTenGroup          String
  classTenRollNo         String
  classTenRegistrationNo String
  classTenGPA            Float
  classTenExamYear       Int
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  classTest              ClassTest[]
  semesterResult         SemesterResult[]
  AttendanceStudentData  AttendanceStudentData[]

  @@map("students")
}

model ClassTest {
  id          String   @id @default(uuid())
  studentName String
  semesterNo  Int
  testNumber  Int
  subject     String
  markNumber  Int
  earnNumber  Float
  userId      String   @unique
  teacherId   String   @unique
  createdAt   DateTime @default(now())

  user    DiplomaStudent? @relation(fields: [userId], references: [id])
  teacher DiplomaTeacher? @relation(fields: [teacherId], references: [id])

  @@map("classTests")
}

model SemesterResult {
  id          String   @id @default(uuid())
  studentName String
  semesterNo  Int
  totalMarks  Float
  studentId   String   @unique
  createdAt   DateTime @default(now())

  student DiplomaStudent? @relation(fields: [studentId], references: [id])

  @@map("results")
}

model AttendanceData {
  id        String                  @id @default(uuid())
  teacherId String
  teacher   DiplomaTeacher          @relation(fields: [teacherId], references: [id])
  students  AttendanceStudentData[] // One-to-many relation
  createdAt DateTime                @default(now())
}

model AttendanceStudentData {
  id           String         @id @default(uuid())
  attendanceId String
  attendance   AttendanceData @relation(fields: [attendanceId], references: [id])
  studentId    String
  student      DiplomaStudent @relation(fields: [studentId], references: [id])
  isAttended   Boolean        @default(false)
}

enum BloodGroup {
  A_POS
  A_NEG
  B_POS
  B_NEG
  AB_POS
  AB_NEG
  O_POS
  O_NEG
}

enum MaritalStatus {
  MARRIED
  UNMARRIED
  DIVORCED
  WIDOWED
}

enum Role {
  ADMIN
  SUPPER_ADMIN
  FACULTY
  STUDENT
}

enum Group {
  A_GROUP
  B_GROUP
  C_GROUP
  D_GROUP
}

enum EmploymentStatus {
  ACTIVE
  INACTIVE
  ON_LEAVE
  RETIRED
  RESIGNED
}

enum Designation {
  LECTURER
  INSTRUCTOR
  SENIOR_INSTRUCTOR
  HEAD_OF_DEPARTMENT
  VICE_PRINCIPAL
  PRINCIPAL
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

